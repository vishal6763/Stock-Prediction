# In[42]:
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
# In[43]:
import torch
import torch.nn as nn
# In[44]:
df= pd.read_csv("/Users/vemul/Downloads/netflix.csv")
closed_prices = df["Close"]
# In[45]:
seq_len = 15
# In[46]:
mm = MinMaxScaler()
scaled_price = mm.fit_transform(np.array(closed_prices)[... , None]).squeeze()
# In[47]:
X=[]
Y=[]
# In[48]:
for i in range(len(scaled_price) - seq_len):
    X.append(scaled_price[i : i+ seq_len])
    Y.append(scaled_price[i+seq_len])
# In[49]:
X = np.array(X)[... , None]
Y = np.array(Y)[... ,None]
# In[50]:
train_x = torch.from_numpy(X[:int(0.8*X.shape[0])]).float()
train_y = torch.from_numpy(Y[:int(0.8*Y.shape[0])]).float()
test_x = torch.from_numpy(X[:int(0.8*X.shape[0])]).float()
test_y = torch.from_numpy(Y[:int(0.8*Y.shape[0])]).float()
# In[51]:
class Model(nn.Module):
    def __init__(self,input_size,hidden_size):
        super().__init__()
        self.lstm = nn.LSTM(input_size , hidden_size,batch_first=True)
        self.fc=nn.Linear(hidden_size, 1)
    def forward(self , x):
        output,(hidden,cell)=self.lstm(x)
        return self.fc(hidden[-1,:])
# In[52]:
model = Model(1,64)
# In[53]:
optimizer=torch.optim.Adam(model.parameters(), lr=0.001)
# In[54]:
loss_fn = nn.MSELoss()
# In[55]:
num_epochs=100
# In[56]:
for epoch in range(num_epochs):
    output = model(train_x)
    loss=loss_fn(output,train_y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    if epoch % 10==0 and epoch !=0:
        print(epoch , "epoch loss", loss.detach().numpy())
# In[57]:
model.eval()
with torch.no_grad():
    output=model(test_x)
# In[58]:
pred=mm.inverse_transform(output.numpy())
real=mm.inverse_transform(test_y.numpy())
# In[61]:
plt.plot(pred.squeeze(),color="red",label="predicted")
plt.plot(real.squeeze(),color="green",label="real")
plt.show()
# In[ ]:
